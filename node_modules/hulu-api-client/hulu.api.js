/**
 * @name: Hulu API Client
 * @author: Allen Sarkisyan
 * @license: MIT Open Source License
 */
var http = require('http');

/**
 * Hulu Client Constructor
 */
var Hulu = function () {
	this.baseUrl = 'http://m.hulu.com/';
	this.searchUrl = 'http://m.hulu.com/search?dp_identifier=hulu&query={{QUERY}}&items_per_page={{ITEMS}}&page={{PAGE}}&format=json';
	this.embedCode = '<iframe src="http://www.hulu.com/embed.html?eid={{EMBED_ID}}" width="{{WIDTH}}" height="{{HEIGHT}}" frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowfullscreen></iframe>';
};

Hulu.prototype.httpRequest = function (url, callback) {
	http.get(url, function (response) {
		var data = '';
		response.on('data', function (chunk) { data += chunk; });

		response.on('end', function () {
			console.log(data);
			if (callback) { callback(data); }
		});
	});
};

Hulu.prototype.generateUrl = function (type, params) {
	var url = this.baseUrl + type + '?dp_id=hulu';

	if (params) {
		for (var i in params) {
			url += (('&' + i) + ('=' + params[i]));
		}
	}

	url += '&format=json';

	return url;
}

/**
 * getCompanies - retrieves information about studios, televison networks, content providers
 * @param  {Object} params
 * 
 * {
 *   // Limit results
 *   limit: 10,
 *   // Sorting order
 *   order_by: 'name%20asc || name%20desc',
 *   // Number of pages
 *   page: 5,
 *   // Display total number of items only
 *   total: 0
 * }
 *
 * @param  {Function} callback
 *
 * return {JSON}
 */
Hulu.prototype.getCompanies = function (params, callback) {
	this.httpRequest(this.generateUrl('companies', params), callback);
};

/**
 * getShows - retrieves shows
 * optional: company_id property to retrieve shows by company
 * optional: channel property to retrieve shows by genres / channels
 * 
 * @param  {Object} params
 *
 * {
 *   // Get shows by company ID
 *   company_id: 123,
 *   
 *   // Get shows by channel / genre
 *   channel: 'action',
 *   
 *   // Limit results
 *   limit: 10,
 *   // Sorting order
 *   order_by: 'name%20asc || name%20desc',
 *   // Number of pages
 *   page: 5,
 *   // Display total number of items only
 *   total: 0
 * }
 *
 * @param  {Function} callback
 * 
 * @return {JSON}
 */
Hulu.prototype.getShows = function (params, callback) {
	this.httpRequest(this.generateUrl('shows', params), callback);
};

/**
 * getVideos - retrieves media items
 * optional: show_id property to retrieve videos by show
 * 
 * @param  {Object} params
 *
 * {
 *   // Get Videos by show ID
 *   show_id: 123,
 *
 *   // Get Videos by video ID
 *   video_id: 12423,
 *   
 *   // Limit results
 *   limit: 10,
 *   // Sorting order
 *   order_by: 'name%20asc || name%20desc',
 *   // Number of pages
 *   page: 5,
 *   // Display total number of items only
 *   total: 0
 * }
 * 
 * @param  {Function} callback
 * 
 * @return {JSON}
 */
Hulu.prototype.getVideos = function (params, callback) {
	this.httpRequest(this.generateUrl('videos', params), callback);
};

/**
 * getEmbedCode - returns an embed code from an eid // embedId
 * @param  {String} embedId
 * @param  {Number} width
 * @param  {Number} height
 * @return {String}
 */
Hulu.prototype.getEmbedCode = function (embedId, width, height) {
	width = width || 512;
	height = height || 288;

	return this.embedCode.replace(/{{EMBED_ID}}|{{WIDTH}}|{{HEIGHT}}/g, function(format) {
		switch (format) {
			case '{{EMBED_ID}}': return embedId;
			case '{{WIDTH}}': return width;
			case '{{HEIGHT}}': return height;
		}
	});
};

/**
 * search - Performs a fuzzy search
 * @param  {Object}   params
 *
 * {
 *   // Search query
 *   query: 'Blacklist',
 *
 *   // Items per page
 *   items: 10,
 *   
 *   // Limit pages
 *   page: 1
 * }
 * 
 * @param  {Function} callback
 */
Hulu.prototype.search = function (params, callback) {
	if (!params.items) { params.items = 10; }
	if (!params.page) { params.page = 1; }

	var self = this,
		url = this.searchUrl.replace(/{{QUERY}}|{{ITEMS}}|{{PAGE}}/g, function(format) {
		switch (format) {
			case '{{QUERY}}': return params.query;
			case '{{ITEMS}}': return params.items;
			case '{{PAGE}}': return params.page;
		}
	});

	this.httpRequest(url, callback);
};

module.exports = new Hulu();